{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Search","Input","Meta","Card","TextTitle","Typography","Title","SearchBox","searchHandler","span","offset","placeholder","enterButton","size","onSearch","value","ColCardBox","imdbID","Poster","Type","ShowDetail","DetailRequest","ActivateModal","style","margin","className","width","cover","alt","src","onClick","fetch","then","resp","json","response","catch","message","title","description","marginTop","color","MovieDetail","imdbRating","Rated","Runtime","Genre","Plot","level","textAlign","marginBottom","Loader","App","useState","data","setData","error","setError","loading","setLoading","q","setQuery","activateModal","setActivateModal","detail","setShowDetail","detailRequest","setDetailRequest","useEffect","Response","Error","padding","background","minHeight","gutter","type","justify","length","map","result","index","key","centered","visible","onCancel","footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.61a7cdf6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Layout,\n  Input,\n  Row,\n  Col,\n  Card,\n  Tag,\n  Spin,\n  Alert,\n  Modal,\n  Typography\n} from 'antd';\nimport 'antd/dist/antd.css';\n\nconst API_KEY = '207cfbe5';\nconst { Header, Content } = Layout;\nconst { Search } = Input;\nconst { Meta } = Card;\nconst TextTitle = Typography.Title;\n\n\nconst SearchBox = ({ searchHandler }) => {\n  return (\n    <Row>\n      <Col span={12} offset={6}>\n        <Search\n          placeholder=\"enter movie, series, episode name\"\n          enterButton=\"Search\"\n          size=\"large\"\n          onSearch={value => searchHandler(value)}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nconst ColCardBox = ({ Title, imdbID, Poster, Type, ShowDetail, DetailRequest, ActivateModal }) => {\n\n  const clickHandler = () => {\n\n    // Display Modal and Loading Icon\n    ActivateModal(true);\n    DetailRequest(true);\n\n    fetch(`https://www.omdbapi.com/?i=${imdbID}&apikey=${API_KEY}`)\n      .then(resp => resp)\n      .then(resp => resp.json())\n      .then(response => {\n        DetailRequest(false);\n        ShowDetail(response);\n      })\n      .catch(({ message }) => {\n        DetailRequest(false);\n      })\n  }\n\n  return (\n    <Col style={{ margin: '20px 0' }} className=\"gutter-row\" span={4}>\n      <div className=\"gutter-box\">\n        <Card\n          style={{ width: 200 }}\n          cover={\n            <img\n              alt={Title}\n              src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster}\n            />\n          }\n          onClick={() => clickHandler()}\n        >\n          <Meta\n            title={Title}\n            description={false}\n          />\n          <Row style={{ marginTop: '10px' }} className=\"gutter-row\">\n            <Col>\n              <Tag color=\"magenta\">{Type}</Tag>\n            </Col>\n          </Row>\n        </Card>\n      </div>\n    </Col>\n  )\n}\n\nconst MovieDetail = ({ Title, Poster, imdbRating, Rated, Runtime, Genre, Plot }) => {\n  return (\n    <Row>\n      <Col span={11}>\n        <img\n          src={Poster === 'N/A' ? 'https://placehold.it/198x264&text=Image+Not+Found' : Poster}\n          alt={Title}\n        />\n      </Col>\n      <Col span={13}>\n        <Row>\n          <Col span={21}>\n            <TextTitle level={4}>{Title}</TextTitle></Col>\n          <Col span={3} style={{ textAlign: 'right' }}>\n            <TextTitle level={4}><span style={{ color: '#41A8F8' }}>{imdbRating}</span></TextTitle>\n          </Col>\n        </Row>\n        <Row style={{ marginBottom: '20px' }}>\n          <Col>\n            <Tag>{Rated}</Tag>\n            <Tag>{Runtime}</Tag>\n            <Tag>{Genre}</Tag>\n          </Col>\n        </Row>\n        <Row>\n          <Col>{Plot}</Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nconst Loader = () => (\n  <div style={{ margin: '20px 0', textAlign: 'center' }}>\n    <Spin />\n  </div>\n)\n\nfunction App() {\n\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [q, setQuery] = useState('London');\n  const [activateModal, setActivateModal] = useState(false);\n  const [detail, setShowDetail] = useState(false);\n  const [detailRequest, setDetailRequest] = useState(false);\n\n\n  useEffect(() => {\n\n    setLoading(true);\n    setError(null);\n    setData(null);\n\n    fetch(`https://www.omdbapi.com/?s=${q}&apikey=${API_KEY}`)\n      .then(response => response)\n      .then(response => response.json())\n      .then(response => {\n        if (response.Response === 'False') {\n          setError(response.Error);\n        }\n        else {\n          setData(response.Search);\n        }\n\n        setLoading(false);\n      })\n      .catch(({ message }) => {\n        setError(message);\n        setLoading(false);\n      })\n\n  }, [q]);\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\">\n        <Header>\n          <div style={{ textAlign: 'center' }}>\n            <TextTitle style={{ color: '#ffffff', marginTop: '14px' }} level={3}>OMDB API + React</TextTitle>\n          </div>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n            <SearchBox searchHandler={setQuery} />\n            <br />\n\n            <Row gutter={16} type=\"flex\" justify=\"center\">\n              {loading &&\n                <Loader />\n              }\n\n              {error !== null &&\n                <div style={{ margin: '20px 0' }}>\n                  <Alert message={error} type=\"error\" />\n                </div>\n              }\n\n              {data !== null && data.length > 0 && data.map((result, index) => (\n                <ColCardBox\n                  ShowDetail={setShowDetail}\n                  DetailRequest={setDetailRequest}\n                  ActivateModal={setActivateModal}\n                  key={index}\n                  {...result}\n                />\n              ))}\n            </Row>\n          </div>\n          <Modal\n            title='Detail'\n            centered\n            visible={activateModal}\n            onCancel={() => setActivateModal(false)}\n            footer={null}\n            width={800}\n          >\n            {detailRequest === false ?\n              (<MovieDetail {...detail} />) :\n              (<Loader />)\n            }\n          </Modal>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}